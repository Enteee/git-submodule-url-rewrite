#!/usr/bin/env bash
set -euo pipefail

export SHELL="${SHELL?}"
export GIT_SUBMODULE_CMD="git submodule --quiet"
export UPDATE_CMD="${GIT_SUBMODULE_CMD} update --init"

usage() {
  cat <<EOF
usage: git submodule-url-rewrite [-h|--help] [-v|--verbose] [-q|--quiet] [-r|--recursive] [-s|--no-stage] [-u|--no-update] sed-command

Rewrites all submodule urls using the given sed-script

options:
  -h|--help       Print this help
  -v|--verbose    Make this script verbose
  -q|--quiet      Don't print anything
  -r|--recursive  Also rewrite submodules of submodules
  -s|--no-stage   Don't stage changed .gitmodule files for commit
  -u|--no-update  Don't run '${UPDATE_CMD}' in each submodule

sed-command: A sed command used to transform urls.
EOF
}

export VERBOSE=false
export QUIET=false
export RECURSIVE=false
export NO_STAGE=false
export NO_UPDATE=false
export SED_COMMAND=""

while true; do
  case "${1:-""}" in

    -h|--help)
      usage && exit 0
    ;;

    "")
      usage
      exit 1
    ;;

    -v|--verbose)
      VERBOSE=true && shift
      GIT_SUBMODULE_CMD="git submodule"
      UPDATE_CMD="${GIT_SUBMODULE_CMD} update --init"
    ;;

    -q|--quiet)
      QUIET=true && shift
    ;;

    -r|--recursive)
      RECURSIVE=true && shift
    ;;

    -s|--no-stage)
      NO_STAGE=true && shift
    ;;

    -u|--no-update)
      NO_UPDATE=true && shift
    ;;

    *)
      SED_COMMAND="${1}" && shift
      break
    ;;

  esac
done

submodule_url_rewrite(){
  local name
  name="${1}" && shift
  local toplevel
  toplevel="$(git rev-parse --show-toplevel)"

  local old_url
  old_url="$(git config --file="${gitmodules}" "submodule.${name}.url")"
  local new_url
  new_url="$(echo "${old_url}" | sed -r -e "${SED_COMMAND}")"

  if [ -z "${new_url}" ]; then
    echo "New url is empty, check your sed command"
  fi

  if [ "${old_url}" == "${new_url}" ]; then
    return
  fi

  if [ "${QUIET}" = false ]; then
    echo "rewrite url for submodule '${name}' in '${toplevel}' from '${old_url}' to '${new_url}'"
  fi

  git config --file="${gitmodules}" "submodule.${name}.url" "${new_url}"
}
export -f submodule_url_rewrite

url_rewrite(){
  set -euo pipefail

  if [ "${VERBOSE}" = true ]; then set -x; fi

  local toplevel
  toplevel="$(git rev-parse --show-toplevel)"
  local gitmodules
  gitmodules="${toplevel}/.gitmodules"

  (
    cd "${toplevel}"

    if [ ! -r "${gitmodules}" ] || [ ! -s "${gitmodules}" ]; then
      return
    fi

    # loop for each submodule
    #
    # we can not use submodule foreach here
    # because that requires a checkout of the
    # submodule, which we don't what to do at
    # this point in time since we are just about
    # to rewrite the checkout url...
    # all this sed / tr / xargs / printf magic
    # is only here to make this script support
    # submodules with newlines and spaces in
    # the name... (ugly init?)
    # On top of that, we have to read -rd ''
    # in order to support \0 entry seperators.
    # Which only really works in bash...
    sed -nre \
      's/^\[submodule \"(.*)\"]$/\1\x0/p' \
      "${gitmodules}" \
    | tr -d '\n' \
    | xargs -0 -n1 printf "%b\0" \
    | while IFS= read -rd '' submodule; do
      submodule_url_rewrite "${submodule}"
    done

    ${GIT_SUBMODULE_CMD} sync

    if [ "${NO_STAGE}" = false ]; then
      git -C "${toplevel}" add "${gitmodules}"
    fi

    # after rewrite we can update the submodules
    if [ "${RECURSIVE}" = true ]; then

      if [ "${NO_UPDATE}" = false ]; then
        ${UPDATE_CMD}
      fi

      ${GIT_SUBMODULE_CMD} foreach "'${SHELL}' -$- -c url_rewrite"
    fi
  )
}
export -f url_rewrite

url_rewrite
